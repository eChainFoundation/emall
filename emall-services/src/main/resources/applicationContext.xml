<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:task="http://www.springframework.org/schema/task" 
	xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:mvc="http://www.springframework.org/schema/mvc" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
						http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
						http://www.springframework.org/schema/aop 
						http://www.springframework.org/schema/aop/spring-aop-3.1.xsd
						http://www.springframework.org/schema/context 
						http://www.springframework.org/schema/context/spring-context-3.1.xsd
						http://www.springframework.org/schema/mvc 
						http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
						http://www.springframework.org/schema/tx 
						http://www.springframework.org/schema/tx/spring-tx-3.1.xsd">
   <!-- 只搜索@Controller 标注的类 不搜索其他标注的类 -->
	<context:component-scan base-package="com.echain.*">
		<context:include-filter  type="annotation"  expression="org.springframework.stereotype.Service"   />  
  		<context:include-filter  type="annotation"  expression="org.springframework.stereotype.Repository"   />  
  		<context:include-filter  type="annotation"  expression="org.springframework.stereotype.Component"    />  
  		<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />
	</context:component-scan>
	
	<bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				 <value>classpath:emall-services.properties</value>
			</list>
		</property>
	</bean>
	
	<!-- task任务扫描注解 -->  
	<!-- 定时器配置 
    task:executor/@pool-size：可以指定执行线程池的初始大小、最大大小 
    task:executor/@queue-capacity：等待执行的任务队列的容量 
    task:executor/@rejection-policy：当等待队已满时的策略，分为丢弃、由任务执行器直接运行等方式 
   -->
   <!--
    <task:scheduler id="scheduler" pool-size="10" />  
	<task:executor id="executor" keep-alive="3600" pool-size="100-200" queue-capacity="500" rejection-policy="CALLER_RUNS" /> 
	<task:annotation-driven executor="executor" scheduler="scheduler" />
	-->
    
     <!-- c3p0连接池配置 -->  
    <bean id="dataSourceC3p0" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${c3p0.driverClassName}" />
		<property name="jdbcUrl" value="${c3p0.url}" />
		<property name="user" value="${c3p0.username}" /><!-- 用户名-->
		<property name="password" value="${c3p0.password}" /><!-- 用户密码-->  
		<property name="autoCommitOnClose" value="true"/><!--关闭连接时，是否提交未提交的事务，默认为false，即关闭连接，回滚未提交的事务 -->
		<property name="checkoutTimeout" value="${cpool.checkoutTimeout}"/><!-- 当连接池连接耗尽时，客户端调用getConnection()后等待获取新连接的时间，超时后将抛出SQLException，如设为0则无限期等待。单位毫秒。默认: 0 -->   
		<property name="initialPoolSize" value="${cpool.minPoolSize}"/><!-- 初始化连接池中的连接数，取值应在minPoolSize与maxPoolSize之间，默认为3-->
		<property name="minPoolSize" value="${cpool.minPoolSize}"/><!-- 连接池中保留的最小连接数，默认为：3-->  
		<property name="maxPoolSize" value="${cpool.maxPoolSize}"/><!--连接池中保留的最大连接数。默认值: 15 -->   
		<property name="maxIdleTime" value="${cpool.maxIdleTime}"/><!--最大空闲时间，60秒内未使用则连接被丢弃。若为0则永不丢弃。默认值: 0 --> 
		<property name="acquireIncrement" value="${cpool.acquireIncrement}"/><!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。默认值: 3 --> 
		<!--定义在从数据库获取新连接失败后重复尝试的次数。默认值: 30 ；小于等于0表示无限次-->   
  		<property name="acquireRetryAttempts" value="0"/>  
		<property name="maxIdleTimeExcessConnections" value="${cpool.maxIdleTimeExcessConnections}"/>
	</bean>
    
    <!-- 对数据源进行代理  解决对连接泄漏的免疫的问题-->
	<bean id="dataSourceProxy" class="org.springframework.jdbc.datasource.TransactionAwareDataSourceProxy" p:targetDataSource-ref="dataSourceC3p0"/>
     
     <!-- 配置sqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation" value="classpath:mybatis-config.xml"></property>
		<property name="dataSource" ref="dataSourceProxy"></property>
	</bean>
     
     <!-- 配置类似于jdbcTemplate的SqlSessionFactory模版 -->
     <bean  id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate" >
     	<constructor-arg index="0" ref="sqlSessionFactory" />
     </bean>
     
     <!-- 配置Jdbc模板  直接使用数据源的代理对象-->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate"	p:dataSource-ref="dataSourceProxy" />
    
     <!-- 配置事务管理器 直接使用数据源的代理对象-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"	p:dataSource-ref="dataSourceProxy"  />
  
	<!-- 使用基于注解模式来管理声明式事物  必须开启注解 并配置事务模版  默认名称为：transactionManager  如果字迹命名必须指向 -->
	
	<!-- 事务的第一种配置 需要在类方法上面进行配置 -->
	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
    
		  
     <bean class="com.echain.util.SpringBeanUtil"/> 
		    	    
</beans>
